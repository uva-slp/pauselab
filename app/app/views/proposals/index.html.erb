

<% if can? :create, Proposal %>
  <%= link_to (t 'proposals.create_new'), new_proposal_path, class: 'btn btn-primary pull-right clearfix' %>
  <br/>
  <br/>
<% end %>

<h2 class="pull-left"><%= Proposal.model_name.human(count:2) %></h2>

<div class="dropdown pull-right ml-1" style="inline-block">
  <a class="dropdown-toggle" href="#" data-toggle="dropdown"><%= t 'common.sort' %></a>
  <div class="dropdown-menu dropdown-menu-right">
    <% if user_has_admin_access %>
      <%= link_to (t 'common.id'), request.query_parameters.merge(:sort => :id), class: 'dropdown-item' %>
      <%= link_to (Vote.model_name.human(count:2)), request.query_parameters.merge(:sort => :votes), class: 'dropdown-item' %>
    <% end %>
    <%= link_to (t 'common.author_first_name'), request.query_parameters.merge(:sort => :first_name), class: 'dropdown-item' %>
    <%= link_to (t 'common.author_last_name'), request.query_parameters.merge(:sort => :last_name), class: 'dropdown-item' %>
    <%= link_to (Proposal.human_attribute_name :title), request.query_parameters.merge(:sort => :title), class: 'dropdown-item' %>
    <%= link_to (t 'common.date'), request.query_parameters.merge(:sort => :date), class: 'dropdown-item' %>
    <%= link_to (ProposalBudget.human_attribute_name :cost), request.query_parameters.merge(:sort => :cost), class: 'dropdown-item' %>
  </div>
</div>

<div class="dropdown pull-right" style="inline-block">
  <a class="dropdown-toggle" href="#" data-toggle="dropdown"><%= t 'common.filter' %></a>
  <div class="dropdown-menu dropdown-menu-right">
    <%= link_to (t 'common.all'), request.query_parameters.except(:status), class: 'dropdown-item' %>
    <% if user_has_admin_access %>
      <%= link_to (Proposal.human_enum_name :status, :unchecked), request.query_parameters.merge(:status => :unchecked), class: 'dropdown-item' %>
    <% end %>
    <%= link_to (Proposal.human_enum_name :status, :approved), request.query_parameters.merge(:status => :approved), class: 'dropdown-item' %>
    <%= link_to (Proposal.human_enum_name :status, :funded), request.query_parameters.merge(:status => :funded), class: 'dropdown-item' %>
  </div>
</div>

<div class="table-responsive">
  <table class="table table-striped">

    <thead>
      <tr>
        <% if user_has_admin_access %>
          <th><%= t 'common.id'%></th>
        <% end %>
        <th><%= t 'common.author' %></th>
        <th><%= t 'common.created_at' %></th>
        <th><%= Proposal.human_attribute_name :title %></th>
        <th><%= ProposalBudget.human_attribute_name :cost %></th>
        <% if user_has_admin_access %>
          <th><%= Proposal.human_attribute_name :status %></th>
        <% end %>
        <% if user_has_admin_access %>
          <th><%= Vote.model_name.human(count:2) %></th>
        <% end %>
      </tr>
    </thead>

    <% @proposals.each do |proposal| %>

      <tr class="row-link" data-href="<%= proposal_path(proposal) %>">
        <% if user_has_admin_access %>
          <td><%= proposal.id %></td>
        <% end %>

        <% if proposal.respond_to? :user %>
          <td><%= proposal.user.fullname %></td>
        <% end %>
        <% if proposal.respond_to? :created_at %>
          <td><%= proposal.created_at.strftime "%D" %></td>
        <% end %>
        <% if proposal.respond_to? :title %>
	        <td><%= proposal.title %></td>
        <% end %>
        <% if proposal.respond_to? :proposal_budget %>
          <td><%= number_to_currency proposal.proposal_budget.cost %></td>
        <% end %>

        <% if user_has_admin_access %>
        <td>
          <span class="badge <%= if proposal.approved? then "badge-primary" elsif proposal.funded? then "badge-success" else "badge-danger" end%>">
            <%= Proposal.human_enum_name(:status, proposal.status) %>
          </span>
        </td>
        <% end %>
        <% if user_has_admin_access %>
          <td><%= proposal.number_of_votes %></td>
        <% end %>

      </tr>
    <% end %>

  </table>
</div>

<%= will_paginate @proposals,
      :class => "pagination-wrapper",
      :previous_label => (t 'common.previous'),
      :next_label => (t 'common.next') %>
